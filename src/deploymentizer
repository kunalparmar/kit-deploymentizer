#!/usr/bin/env node
"use strict";

const logger = require("log4js").getLogger();
const program = require("commander");
const packageJson = require("../package.json");
const Promise = require("bluebird");
const Deploymentizer = require("./lib/deploymentizer");
const eventHandler = require("./util/event-handler");
const yamlHandler = require("./util/yaml-handler");
const exit = process.exit;

const parseBoolean = function(str) {
	return (str === "true");
};

/**
 * loads a conf file. Valid conf:
 * {
 *	base: { path: "/" },
 *	output: { path: "/" },
 *	cluster: { path: "/" },
 *	resources: { path: "/" },
 *	type: { path: "/" },
 *	images: { path: "/" },
 *	plugin: {
 *		path: "/",
 *		options: {
 *		 // any required options for plugin
 *		}
 *	}
 * }
 * @param  {[type]} confPath [description]
 * @return {[type]}          [description]
 */
const loadConf = function(confPath) {
	return Promise.coroutine(function* () {
		let exists = yield yamlHandler.exists( confPath );
		if (exists) {
			const conf = yield yamlHandler.loadFile(confPath);
			return conf;
		} else {
			eventHandler.emitFatal("No Configuration file found.");
			throw new Error("No Configuration file found");
		}
	})();
}
/**
 * Most values should be set in the conf file, with the exception of --clean and --save
 * At least --conf flags must be set.
 */
program
	.version(packageJson.version)
	.usage("[options]")
	.option("-c, --clean <boolean>", "Set if the output directory should be deleted and re-created before generating manifest files", parseBoolean, parseBoolean(process.env.CLEAN))
	.option("-s, --save <boolean>", "Sets if the generated manifest files are saved to the output diretory or not", parseBoolean, parseBoolean(process.env.SAVE))
	.option("-w, --workdir <string>", "Sets the working directory for reading paths defined in the conf file. Allows absolute paths in conf also.", process.env.WORKDIR)
	.option("-k, --conf <string>", "Sets the configure file to load at start up - Required.", process.env.CONF)
	.option("-d, --debug <boolean>", "Sets debug flag", parseBoolean, parseBoolean(process.env.DEBUG))
	.option("-r, --resource <string>", "Sets the resource to generate", process.env.RESOURCE)
	.option("-t, --clusterType <string>", "Sets the cluster type to generate", process.env.CLUSTER_TYPE)
	.parse(process.argv)
;

// Enable logging of all events from the deploymentizer
eventHandler.on(eventHandler.INFO, function(message) {
	logger.info(message);
});
eventHandler.on(eventHandler.WARN, function(message) {
	logger.warn(message);
});
eventHandler.on(eventHandler.FATAL, function(message) {
	logger.fatal(message);
});
if (program.debug) {
	eventHandler.on(eventHandler.DEBUG, function(message) {
		logger.debug(message);
	});
}

loadConf(program.conf).then( (conf) => {
	const deploymentizer = new Deploymentizer({
		clean: program.clean,
		save: program.save,
		workdir: program.workdir,
		conf: conf,
		resource: program.resource,
		clusterType: program.clusterType
	});
	// Run the deploymentizer
	return deploymentizer.process()
		.then(function() {
			exit(0);
		})
		.catch(function(err) {
			logger.fatal(err.message || err);
			throw new Error(err);
		})
		.done();
});
